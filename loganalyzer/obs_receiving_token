#!/usr/bin/env python

import sys, re
import pyutil

if len(sys.argv) < 3:
  print 'usage: receive_token <logdir> <observed_node> [observer]'
  exit(1)

logdir = sys.argv[1]

pyutil.read_machinelist(logdir)
num_nodes = pyutil.num_node
if len(sys.argv) == 4:
  node_range = [int(sys.argv[3])]
else:
  node_range = range(1, num_nodes + 1)

data = []
observed_node = int(sys.argv[2])
observed_ip = pyutil.nid2ip[observed_node]
for i in node_range:
  observer_ip = pyutil.nid2ip[i]
  logfile = open(logdir + '/node' + str(i) + '/scale1.log')
  for logline in logfile:
    if 'Absorbing /' + observed_ip in logline:
      sections = map(str.strip, logline.split(';'))
      last_section = sections[-1].split()
      second_section = sections[-2].split()
      absorb_ip = last_section[3][1:]
      version = int(last_section[5])
      new_node_token = int(second_section[1].split('=')[1])
      new_version_token = int(second_section[4].split('=')[1])
      new_token = new_node_token + new_version_token
      absorb_nid = pyutil.ip2nid[absorb_ip]
      logfile2 = open(logdir + '/node' + str(absorb_nid) + '/scale1.log')
      for logline2 in logfile2:
        if 'Forwarding /' + observed_ip in logline2:
          sections2 = map(str.strip, logline2.split(';'))
          last_section2 = sections2[-1].split()
          second_section2 = sections2[-2].split()
          if second_section2[0] == 'Send':
            continue
          forward_ip = last_section2[3][1:]
          version2 = int(last_section2[5])
          if forward_ip == observer_ip and version == version2:
            new_node_token2 = int(second_section2[1].split('=')[1])
            new_version_token2 = int(second_section2[4].split('=')[1])
            new_token += new_node_token2 + new_version_token2
            break
      if new_token:
        data.append(new_token)
data.sort()
datasize = len(data)
lqpos = datasize / 4
medpos = datasize / 2
uqpos = lqpos * 3
print 'datasize=%d min=%f lq=%f med=%f uq=%f max=%f' % \
    (datasize, data[0], data[lqpos], data[medpos], data[uqpos], data[-1])

