#!/usr/bin/env python

import sys
from datetime import *

import pyutil

if len(sys.argv) < 2:
  print 'usage: sim_gossip_interval <logdir> [time_period]'
  print 'example: phi_distribute.py n'
  exit(1)

logdir = sys.argv[1]

if len(sys.argv) > 2:
  time_period = int(sys.argv[2])
else:
  time_period = None

pyutil.read_machinelist(logdir)
pyutil.read_simlist(logdir)

rectimehist = {}

for observer in pyutil.observer_nid2ip:
  observer_ip = pyutil.observer_nid2ip[observer]
  rectimehist[observer_ip] = { }
  recline = 'receive info of /'
  logfile = open(logdir + '/observer' + str(observer) + '/node1.log')
  for logline in logfile:
    if recline in logline:
      entries = logline.split()
      observed_node_ip = entries[11][1:]
      if observed_node_ip in pyutil.observed_node_ip2nid:
        if not observed_node_ip in rectimehist[observer_ip]:
          rectimehist[observer_ip][observed_node_ip] = []
        time = (entries[2] + ' ' + entries[3]).split(',')[0]
        timestamp = datetime.strptime(time, '%Y-%m-%d %X')
        rectimehist[observer_ip][observed_node_ip].append(timestamp)

for observer_ip in pyutil.observer_ip2nid:
  for observed_node_ip in pyutil.observed_node_ip2nid:
    if not observed_node_ip in rectimehist[observer_ip]:
      print observer_ip, 'does not see any gossip of', observed_node_ip
    else:
      if time_period:
        firsttime = rectimehist[observer_ip][observed_node_ip][0]
        time_period_list = [] 
        for rectime in rectimehist[observer_ip][observed_node_ip]:
          if (rectime - firsttime).total_seconds() > time_period:
            break
          time_period_list.append(rectime)
      else:
        time_period_list = rectimehist[observer_ip][observed_node_ip][:]
      recinthist = []
      prevrec = time_period_list[0]
      for rectime in time_period_list[1:]:
        recinthist.append((rectime - prevrec).total_seconds())
        prevrec = rectime
      recinthist.sort()
      datasize = len(recinthist)
      lqpos = datasize / 4
      meanpos = datasize / 2
      uqpos = lqpos * 3
      print 'observer %s observes observed node %s: datasize=%d min=%f lq=%f mean=%f uq=%f max=%f' % \
          (observer_ip, observed_node_ip, datasize, recinthist[0], recinthist[lqpos], \
              recinthist[meanpos], recinthist[uqpos], recinthist[-1])


